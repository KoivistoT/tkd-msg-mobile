  
  

  
  - lisää listenerit sockettiin niin, että uusi viesti messageihin. 
  Huomaa subscripe ja new message, missä vaiheessa mikäin ja milloin 
  viesti tulee eri tavalla, jos on huoneessa ja jos ei ole


- Katso tässä jotain ideaa, mutta ehkä helpommin toteutettavissa
https://stackoverflow.com/questions/65373593/how-to-cause-a-rerender-only-if-one-object-changes-in-a-useselector
Tässä oikea
https://redux.js.org/usage/deriving-data-selectors


- Testaa täältä se, miten katsoo missä vaiheessa mennään. Onko parempi, kuin se
mikä nyt mulla on https://redux.js.org/tutorials/essentials/part-5-async-logic




  later:

    - hae myös all users?, jotta saa niiden tiedot nopeasti ja sitten
   id:llä aina haetaan ne, jos members jne. ja sitten myös muutokset 
   niihin jos tulee"
   
    -----> onko niin, että aluksi subscripe kaikkiin huoneisiin, myös pois ja 
  takaisin, jos add ja remove. Jos viesti tulee, niin se tulee "new message", jos
  huoneessa, niin ei push, eli erikseen on vielä activeRoomId. Eli "new message"
  socketissa katsoo onko new message roomId sama kuin activeRoomId ja toimii sen
  mukaan, myös äänet. Pitää olla subscripe kaikki huoneet, koska niin saa aina
  BE:stä uuden viestin heti.
  
    - testaa aggregate ja static method mongoosessa

    - error message handlelit kuntoon, esimerkiksi createUserForm ja createRoomForm

    - Jossain pitää unsubscripe huoneet, kun sovellus kill? Ei silloin, 
    jos menee taustalle? Eli app.js useeffect return? Vai appState. Nyt jo
    poistaakin, kun killaa. Riittääkö?